# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import pygrpc.ringct_pb2 as ringct__pb2
# import ringct_pb2 as ringct__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ringct_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RingCT_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate_Voter_and_Voting_Currency = channel.unary_unary(
                '/ringct.RingCT_Service/Generate_Voter_and_Voting_Currency',
                request_serializer=ringct__pb2.Gen_VoterCurr_Request.SerializeToString,
                response_deserializer=ringct__pb2.Gen_VoterCurr_Response.FromString,
                _registered_method=True)
        self.Generate_CandidateKeys = channel.unary_unary(
                '/ringct.RingCT_Service/Generate_CandidateKeys',
                request_serializer=ringct__pb2.Gen_Candidate_Request.SerializeToString,
                response_deserializer=ringct__pb2.Gen_Candidate_Response.FromString,
                _registered_method=True)
        self.Compute_Vote = channel.unary_unary(
                '/ringct.RingCT_Service/Compute_Vote',
                request_serializer=ringct__pb2.Vote_Request.SerializeToString,
                response_deserializer=ringct__pb2.Vote_Response.FromString,
                _registered_method=True)
        self.Calculate_Total_Vote = channel.unary_unary(
                '/ringct.RingCT_Service/Calculate_Total_Vote',
                request_serializer=ringct__pb2.Calculate_Total_Vote_Request.SerializeToString,
                response_deserializer=ringct__pb2.Calculate_Total_Vote_Response.FromString,
                _registered_method=True)
        self.Filter_Non_Voter = channel.unary_unary(
                '/ringct.RingCT_Service/Filter_Non_Voter',
                request_serializer=ringct__pb2.Filter_Non_Voter_Request.SerializeToString,
                response_deserializer=ringct__pb2.Filter_Non_Voter_Response.FromString,
                _registered_method=True)


class RingCT_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Generate_Voter_and_Voting_Currency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Generate_CandidateKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compute_Vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Calculate_Total_Vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Filter_Non_Voter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RingCT_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate_Voter_and_Voting_Currency': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate_Voter_and_Voting_Currency,
                    request_deserializer=ringct__pb2.Gen_VoterCurr_Request.FromString,
                    response_serializer=ringct__pb2.Gen_VoterCurr_Response.SerializeToString,
            ),
            'Generate_CandidateKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate_CandidateKeys,
                    request_deserializer=ringct__pb2.Gen_Candidate_Request.FromString,
                    response_serializer=ringct__pb2.Gen_Candidate_Response.SerializeToString,
            ),
            'Compute_Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Compute_Vote,
                    request_deserializer=ringct__pb2.Vote_Request.FromString,
                    response_serializer=ringct__pb2.Vote_Response.SerializeToString,
            ),
            'Calculate_Total_Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Calculate_Total_Vote,
                    request_deserializer=ringct__pb2.Calculate_Total_Vote_Request.FromString,
                    response_serializer=ringct__pb2.Calculate_Total_Vote_Response.SerializeToString,
            ),
            'Filter_Non_Voter': grpc.unary_unary_rpc_method_handler(
                    servicer.Filter_Non_Voter,
                    request_deserializer=ringct__pb2.Filter_Non_Voter_Request.FromString,
                    response_serializer=ringct__pb2.Filter_Non_Voter_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ringct.RingCT_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ringct.RingCT_Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RingCT_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Generate_Voter_and_Voting_Currency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ringct.RingCT_Service/Generate_Voter_and_Voting_Currency',
            ringct__pb2.Gen_VoterCurr_Request.SerializeToString,
            ringct__pb2.Gen_VoterCurr_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Generate_CandidateKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ringct.RingCT_Service/Generate_CandidateKeys',
            ringct__pb2.Gen_Candidate_Request.SerializeToString,
            ringct__pb2.Gen_Candidate_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Compute_Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ringct.RingCT_Service/Compute_Vote',
            ringct__pb2.Vote_Request.SerializeToString,
            ringct__pb2.Vote_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Calculate_Total_Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ringct.RingCT_Service/Calculate_Total_Vote',
            ringct__pb2.Calculate_Total_Vote_Request.SerializeToString,
            ringct__pb2.Calculate_Total_Vote_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Filter_Non_Voter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ringct.RingCT_Service/Filter_Non_Voter',
            ringct__pb2.Filter_Non_Voter_Request.SerializeToString,
            ringct__pb2.Filter_Non_Voter_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
